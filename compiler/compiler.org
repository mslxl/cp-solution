#+TITLE: Compiler Note

#+begin_src dot :file ./compiler_workflow.png
graph workflow{
    Source--Lex;
    Lex--Syntax;
    Syntax--MiddleCodeGen;
    MiddleCodeGen--CodeOpt;
    CodeOpt--TargetCodeGen;
}
#+end_src

#+RESULTS:
[[file:./compiler_workflow.png]]

1) 词法分析
2) 语法分析
3) 语义分析
4) 中间代码生成
5) 优化中间代码
6) 生成中间代码

编译器各步骤不是串行执行，而是以语法分析为主线串行执行的。词法分析器和代码生成器只会被语法分析器调用。

** 符号表
符号表用于记录文件中的符号。符号可以是字符串、方法名、变量名、变量值。表可以是任何可以 CURD 的结构。

使用符号表可以使生成的指令变得不那么冗长。

** 闭包
*** 关系中的闭包
**** 偶序
顺序相关成对出现的两个元素。
(A,B) \ne (B,A)
**** 笛卡尔积
将两个集合中的所有元素一一连接。记作 A \times A
**** 方幂
一个字符串 x 及其自身的 n-1 次连接称此 x^n。
例如:
+ x^1 = x
+ x^2 = xx^1 = xx
+ x^3 = xx^2 = xxx^1 = xxx

  *特别的，x^0 = \epsilon (空串)*
**** 集合的方幂
集合的方幂就是集合与自身的连接。*特别的，记 A^0 = {\epsilon}

+ A = {a,b,c}
+ A^2 = {aa,ab,bc,ba,bb,bc,ca,cb,cc}
+ A^3 = {aaa,aab,aac,aba,abb,abc,aca,acb,acc,baa,bab,bac,bba,bbb,bbc,bca,bcb,bcc,caa,cab,cac,cba,cbb,cbc,cca,ccb,ccc}
**** 闭包
闭包就是集合所有方幂的并集,记作 A^*

A^* = A^0 \cup A^1 \cup A^2 \cup \cdots
*** 程序中的闭包
程序中的闭包自然具有封闭的概念，它封闭的是外部函数中的局部变量，如下面的 =vec=
#+begin_src python :results output
def foo():
    vec = [0]
    def bar():
        vec[0] += 1
        print(vec[0])
    return bar

foobar = foo()
foobar()
foobar()
foobar()
#+end_src

#+RESULTS:
: 1
: 2
: 3

封闭的变量也被称为自由变量
